<?php

namespace common\models\users\forms;

use common\components\notification\Notification;
use common\components\notification\NotificationMessages;
use common\models\User;
use common\models\users\AbstractUser;
use kartik\password\StrengthValidator;
use libphonenumber\PhoneNumberUtil;
use Yii;
use yii\base\Model;

/**
 * Register form
 */
class AbstractRegisterForm extends Model
{

    public $UserClass;
    public $UserClassFilter;
    public $firstname;
    public $lastname;
    public $email;
    public $phone;
    public $phone_number;
    public $password;

    /**
     *
     * @var AbstractUser
     */
    protected $_user;

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            // email and password are both required
            [['email', 'password', 'firstname', 'lastname', 'phone'], 'required'],
            [['firstname', 'lastname'], 'string'],
            ['email', 'email'],
            ['email', 'unique', 'targetClass' => User::className(), 'targetAttribute' => 'email', 'message' => "An account with this email address already exists."],
            ['phone', 'unique', 'targetClass' => User::className(), 'targetAttribute' => 'phone_number', 'message' => "An account with this phone number already exists."],
            // password is validated by validatePassword()
            ['password', StrengthValidator::className(), 'preset' => 'normal', 'userAttribute' => 'firstname'],
            // password is validated by validatePassword()
            ['phone', 'validatePhone'],
            ['phone_number', 'safe'],
        ];
    }

    public function beforeValidate()
    {
        if(!empty($this->phone_number)){
            $phoneUtil = PhoneNumberUtil::getInstance();
            $number = $phoneUtil->parse($this->phone_number, 'LB');
            if ($phoneUtil->isValidNumber($number)) {
                $this->phone = $this->phone_number;
            }
        }
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'firstname' => Yii::t("app", "First name"),
            'lastname' => Yii::t("app", "Last name"),
            'email' => Yii::t("app", "Email"),
            'password' => Yii::t("app", "Password"),
            'phone' => Yii::t("app", "Phone Number"),
        ];
    }


    public function validatePhone($attribute, $params)
    {
        try {
            $phoneUtil = PhoneNumberUtil::getInstance();
            $number = $phoneUtil->parse($this->$attribute, 'LB');
            $this->$attribute = $phoneUtil->formatNumberForMobileDialing($number, "", false);
            if (!$phoneUtil->isValidNumber($number)) {
                $this->addError($attribute, Yii::t('app', 'Invalid phone number.'));
            }
        } catch (NumberParseException $x) {
            $this->addError($attribute, Yii::t('app', 'Invalid phone number.'));
        }
    }

    public function register()
    {
        if ($this->validate()) {
            $this->_user = new User();
            $this->_user->firstname = $this->firstname;
            $this->_user->lastname = $this->lastname;
            $this->_user->email = $this->email;
            $this->_user->phone_number = $this->phone;
            $this->_user->setPassword($this->password);
            $this->_user->status = User::STATUS_ENABLED;
            if ($this->_user->save()) {

                Notification::notifyAdmins(NotificationMessages::ADMIN__NEW_USER_REGISTERED, [
                    'name' => $this->_user->name
                ], ['/user/view', 'id' => $this->_user->id]);

                return Yii::$app->user->login($this->_user, 3600 * 24 * 30);
            }
        }
        return false;
    }

    /**
     * @return AbstractUser
     */
    public function getUser()
    {
        return $this->_user;
    }
}
